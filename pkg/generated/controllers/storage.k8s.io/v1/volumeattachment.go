/*
Copyright 2024 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	v1 "k8s.io/api/storage/v1"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// VolumeAttachmentController interface for managing VolumeAttachment resources.
type VolumeAttachmentController interface {
	generic.NonNamespacedControllerInterface[*v1.VolumeAttachment, *v1.VolumeAttachmentList]
}

// VolumeAttachmentClient interface for managing VolumeAttachment resources in Kubernetes.
type VolumeAttachmentClient interface {
	generic.NonNamespacedClientInterface[*v1.VolumeAttachment, *v1.VolumeAttachmentList]
}

// VolumeAttachmentCache interface for retrieving VolumeAttachment resources in memory.
type VolumeAttachmentCache interface {
	generic.NonNamespacedCacheInterface[*v1.VolumeAttachment]
}

type VolumeAttachmentStatusHandler func(obj *v1.VolumeAttachment, status v1.VolumeAttachmentStatus) (v1.VolumeAttachmentStatus, error)

type VolumeAttachmentGeneratingHandler func(obj *v1.VolumeAttachment, status v1.VolumeAttachmentStatus) ([]runtime.Object, v1.VolumeAttachmentStatus, error)

func RegisterVolumeAttachmentStatusHandler(ctx context.Context, controller VolumeAttachmentController, condition condition.Cond, name string, handler VolumeAttachmentStatusHandler) {
	statusHandler := &volumeAttachmentStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, generic.FromObjectHandlerToHandler(statusHandler.sync))
}

func RegisterVolumeAttachmentGeneratingHandler(ctx context.Context, controller VolumeAttachmentController, apply apply.Apply,
	condition condition.Cond, name string, handler VolumeAttachmentGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &volumeAttachmentGeneratingHandler{
		VolumeAttachmentGeneratingHandler: handler,
		apply:                             apply,
		name:                              name,
		gvk:                               controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterVolumeAttachmentStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type volumeAttachmentStatusHandler struct {
	client    VolumeAttachmentClient
	condition condition.Cond
	handler   VolumeAttachmentStatusHandler
}

func (a *volumeAttachmentStatusHandler) sync(key string, obj *v1.VolumeAttachment) (*v1.VolumeAttachment, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		if a.condition != "" {
			// Since status has changed, update the lastUpdatedTime
			a.condition.LastUpdated(&newStatus, time.Now().UTC().Format(time.RFC3339))
		}

		var newErr error
		obj.Status = newStatus
		newObj, newErr := a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
		if newErr == nil {
			obj = newObj
		}
	}
	return obj, err
}

type volumeAttachmentGeneratingHandler struct {
	VolumeAttachmentGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *volumeAttachmentGeneratingHandler) Remove(key string, obj *v1.VolumeAttachment) (*v1.VolumeAttachment, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1.VolumeAttachment{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *volumeAttachmentGeneratingHandler) Handle(obj *v1.VolumeAttachment, status v1.VolumeAttachmentStatus) (v1.VolumeAttachmentStatus, error) {
	if !obj.DeletionTimestamp.IsZero() {
		return status, nil
	}

	objs, newStatus, err := a.VolumeAttachmentGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
