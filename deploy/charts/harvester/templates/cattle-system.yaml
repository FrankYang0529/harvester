# system-upgrade-controller(https://github.com/rancher/system-upgrade-controller) watches secret and node change.
# If there is a new node, system-upgrade-controller creates a job on the node to change CA certificates.
# If additional-ca is changed, system-upgrade-controller creates a job on each node to change CA certificates.
apiVersion: upgrade.cattle.io/v1
kind: Plan
metadata:
  name: sync-additional-ca
  namespace: cattle-system
spec:
  concurrency: 1
  nodeSelector:
    matchLabels:
      harvesterhci.io/managed: "true"
  tolerations:
  - effect: NoExecute
    operator: Exists
  serviceAccountName: system-upgrade-controller
  secrets:
    - name: harvester-additional-ca
      path: /ca
  version: v1.1.0
  upgrade:
    image: {{ .Values.generalJob.image.repository }}:{{ .Values.generalJob.image.tag }}
    command: ["/bin/sh", "-c"]
    args:
      - echo "Update additional ca ...";
        cp /ca/additional-ca.pem /host/etc/pki/trust/anchors;
        chroot /host update-ca-certificates;
        echo "Done";
---
apiVersion: v1
kind: Secret
metadata:
  name: harvester-update-containerd-registry-script
  namespace: cattle-system
type: Opaque
stringData:
  update_registries.sh: |
    #!/bin/sh
    RESTART=true
    if [ -f "/etc/rancher/rke2/registries.yaml" ]; then
      if cmp -s "/run/system-upgrade/secrets/registries/registries.yaml" "/etc/rancher/rke2/registries.yaml"; then
        RESTART=false
        echo "/etc/rancher/rke2/registries.yaml is not changed"
      fi
    else
      echo "File /etc/rancher/rke2/registries.yaml doesn't exist"
      if [ ! -s "/run/system-upgrade/secrets/registries/registries.yaml" ]; then
        RESTART=false
        echo "New registries.yaml is empty"
      fi
    fi
    if [ "$RESTART" == true ]; then
      echo "Update /etc/rancher/rke2 ..."
      cp /run/system-upgrade/secrets/registries/registries.yaml /etc/rancher/rke2
      echo "Restart RKE2 ..."
      kill $(pgrep rke2)
      echo "Done"
    else
      echo "Registry content doesn't change"
    fi
---
apiVersion: upgrade.cattle.io/v1
kind: Plan
metadata:
  name: sync-containerd-registry
  namespace: cattle-system
spec:
  concurrency: 1
  nodeSelector:
    matchLabels:
      harvesterhci.io/managed: "true"
  tolerations:
  - effect: NoExecute
    operator: Exists
  serviceAccountName: system-upgrade-controller
  secrets:
    - name: harvester-containerd-registry
      path: /host/run/system-upgrade/secrets/registries
    - name: harvester-update-containerd-registry-script
      path: /host/run/system-upgrade/secrets/scripts
  version: v1.1.0
  upgrade:
    image: {{ .Values.generalJob.image.repository }}:{{ .Values.generalJob.image.tag }}
    command: ["chroot", "/host"]
    args: ["sh", "/run/system-upgrade/secrets/scripts/update_registries.sh"]
---
apiVersion: upgrade.cattle.io/v1
kind: Plan
metadata:
  name: harvester-rotate-rke2-server-certs
  namespace: cattle-system
spec:
  concurrency: 1
  nodeSelector:
    matchLabels:
      harvesterhci.io/managed: "true"
      # currently, we allow etcd only, but not control-plane only node,
      # so we can use this label to filter server nodes
      node-role.kubernetes.io/etcd: "true"
  tolerations:
  - effect: NoExecute
    operator: Exists
  serviceAccountName: system-upgrade-controller
  # we don't need data from secret, just need to trigger the job
  secrets:
    - name: harvester-rotate-rke2-certs
      path: /harvester-rotate-rke2-certs
  version: v1.0.0
  upgrade:
    image: {{ .Values.generalJob.image.repository }}:{{ .Values.generalJob.image.tag }}
    command: ["/bin/sh", "-c"]
    args:
      - echo "Stop RKE2 server ...";
        chroot /host systemctl stop rke2-server;
        echo "Rotate certificates ...";
        chroot /host /opt/rke2/bin/rke2 certificate rotate;
        echo "Start RKE2 server ...";
        chroot /host systemctl start rke2-server;
        echo "Done";
---
apiVersion: upgrade.cattle.io/v1
kind: Plan
metadata:
  name: harvester-rotate-rke2-agent-certs
  namespace: cattle-system
spec:
  concurrency: 1
  nodeSelector:
    matchLabels:
      harvesterhci.io/managed: "true"
    matchExpressions:
      - key: node-role.kubernetes.io/etcd
        operator: NotIn
        values:
          - "true"
      - key: node-role.kubernetes.io/control-plane
        operator: NotIn
        values:
          - "true"
  tolerations:
  - effect: NoExecute
    operator: Exists
  serviceAccountName: system-upgrade-controller
  # we don't need data from secret, just need to trigger the job
  secrets:
    - name: harvester-rotate-rke2-certs
      path: /harvester-rotate-rke2-certs
  version: v1.0.0
  upgrade:
    image: {{ .Values.generalJob.image.repository }}:{{ .Values.generalJob.image.tag }}
    command: ["/bin/sh", "-c"]
    args:
      # Agent certificates are renewed every time the agent starts.
      # ref: https://docs.rke2.io/advanced#certificate-rotation
      - echo "Restart RKE2 agent to trigger certificate rotation ...";
        chroot /host systemctl restart rke2-agent;
        echo "Done";
---
apiVersion: v1
kind: Secret
metadata:
  name: harvester-update-http-proxy-script
  namespace: cattle-system
type: Opaque
stringData:
  update_http_proxy.sh: |
    #!/bin/sh
    RKE2_SA_ENV_FILE_PATH="/var/lib/rancher/rke2/system-agent-installer/rke2-sa.env"
    OLD_ENV_FILE_PATH_HASH=""
    update_env_file() {
      local file_path=$1
      local key=$2
      local value=$3

      if grep -q "^$key=" "$file_path"; then
        sed -i "s|^$key=.*|$key=$value|" "$file_path"
        echo "Updated $key with value $value in $file_path"
      else
        echo "$key=$value" >> "$file_path"
        echo "Added $key=$value to $file_path"
      fi
    }

    if [ -f "${RKE2_SA_ENV_FILE_PATH}" ]; then
      OLD_ENV_FILE_PATH_HASH=$(sha256sum "${RKE2_SA_ENV_FILE_PATH}" | awk '{print $1}')
    else
      mkdir -p /var/lib/rancher/rke2/system-agent-installer
      touch "${RKE2_SA_ENV_FILE_PATH}"
      echo "Created file ${RKE2_SA_ENV_FILE_PATH}"
    fi

    update_env_file "${RKE2_SA_ENV_FILE_PATH}" "HTTP_PROXY" $(cat /run/system-upgrade/secrets/harvester-http-proxy/HTTP_PROXY)
    update_env_file "${RKE2_SA_ENV_FILE_PATH}" "HTTPS_PROXY" $(cat /run/system-upgrade/secrets/harvester-http-proxy/HTTPS_PROXY)
    update_env_file "${RKE2_SA_ENV_FILE_PATH}" "NO_PROXY" $(cat /run/system-upgrade/secrets/harvester-http-proxy/NO_PROXY)
    echo "Content in ${RKE2_SA_ENV_FILE_PATH}: $(cat ${RKE2_SA_ENV_FILE_PATH})"

    NEW_ENV_FILE_PATH_HASH=$(sha256sum "${RKE2_SA_ENV_FILE_PATH}" | awk '{print $1}')
    if [ "$OLD_ENV_FILE_PATH_HASH" != "$NEW_ENV_FILE_PATH_HASH" ]; then
      echo "Restarting RKE2 to apply new content in ${RKE2_SA_ENV_FILE_PATH} ..."
      kill $(pgrep rke2)
      echo "Done"
    else
      echo "Content in ${RKE2_SA_ENV_FILE_PATH} doesn't change."
    fi
---
apiVersion: upgrade.cattle.io/v1
kind: Plan
metadata:
  name: harvester-update-http-proxy
  namespace: cattle-system
spec:
  concurrency: 1
  nodeSelector:
    matchLabels:
      harvesterhci.io/managed: "true"
  tolerations:
  - effect: NoExecute
    operator: Exists
  serviceAccountName: system-upgrade-controller
  secrets:
  - name: harvester-http-proxy
    path: /host/run/system-upgrade/secrets/harvester-http-proxy
  - name: harvester-update-http-proxy-script
    path: /host/run/system-upgrade/secrets/scripts
  version: v1.0.0
  upgrade:
    image: {{ .Values.generalJob.image.repository }}:{{ .Values.generalJob.image.tag }}
    command: ["chroot", "/host"]
    args: ["sh", "/run/system-upgrade/secrets/scripts/update_http_proxy.sh"]
