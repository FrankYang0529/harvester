# system-upgrade-controller(https://github.com/rancher/system-upgrade-controller) watches secret and node change.
# If there is a new node, system-upgrade-controller creates a job on the node to change CA certificates.
# If additional-ca is changed, system-upgrade-controller creates a job on each node to change CA certificates.
apiVersion: upgrade.cattle.io/v1
kind: Plan
metadata:
  name: sync-additional-ca
  namespace: cattle-system
spec:
  concurrency: 1
  nodeSelector:
    matchLabels:
      harvesterhci.io/managed: "true"
  tolerations:
  - effect: NoExecute
    operator: Exists
  serviceAccountName: system-upgrade-controller
  secrets:
    - name: harvester-additional-ca
      path: /ca
  version: v1.1.0
  upgrade:
    image: {{ .Values.generalJob.image.repository }}:{{ .Values.generalJob.image.tag }}
    command: ["/bin/sh", "-c"]
    args:
      - echo "Update additional ca ...";
        cp /ca/additional-ca.pem /host/etc/pki/trust/anchors;
        chroot /host update-ca-certificates;
        echo "Done";
---
apiVersion: upgrade.cattle.io/v1
kind: Plan
metadata:
  name: sync-plan-to-servers
  namespace: cattle-system
spec:
  concurrency: 1
  nodeSelector:
    matchLabels:
      harvesterhci.io/managed: "true"
      # currently, we allow etcd only, but not control-plane only node,
      # so we can use this label to filter server nodes
      node-role.kubernetes.io/etcd: "true"
  tolerations:
  - effect: NoExecute
    operator: Exists
  serviceAccountName: system-upgrade-controller
  secrets:
    - name: harvester-system-agent-plan
      path: /harvester-system-agent-plan
  version: v1.0.0
  upgrade:
    image: {{ .Values.generalJob.image.repository }}:{{ .Values.generalJob.image.tag }}
    command: ["/bin/sh", "-c"]
    args:
      - if [ -f /host/var/lib/rancher/agent/plans ]; then
          echo "Remove /var/lib/rancher/agent/plans ...";
          rm -rf /host/var/lib/rancher/agent/plans;
          echo "Done";
        fi;
        mkdir -p /host/var/lib/rancher/agent/plans;
        echo "Copy server.plan to /var/lib/rancher/agent/plans ...";
        cp /harvester-system-agent-plan/server.plan /host/var/lib/rancher/agent/plans;
        echo "Done";
---
apiVersion: upgrade.cattle.io/v1
kind: Plan
metadata:
  name: sync-plan-to-agents
  namespace: cattle-system
spec:
  concurrency: 1
  nodeSelector:
    matchLabels:
      harvesterhci.io/managed: "true"
    matchExpressions:
      - key: node-role.kubernetes.io/etcd
        operator: NotIn
        values:
          - "true"
      - key: node-role.kubernetes.io/control-plane
        operator: NotIn
        values:
          - "true"
  tolerations:
  - effect: NoExecute
    operator: Exists
  serviceAccountName: system-upgrade-controller
  secrets:
    - name: harvester-system-agent-plan
      path: /harvester-system-agent-plan
  version: v1.0.0
  upgrade:
    image: {{ .Values.generalJob.image.repository }}:{{ .Values.generalJob.image.tag }}
    command: ["/bin/sh", "-c"]
    args:
      - if [ -f /host/var/lib/rancher/agent/plans ]; then
          echo "Remove /var/lib/rancher/agent/plans ...";
          rm -rf /host/var/lib/rancher/agent/plans;
          echo "Done";
        fi;
        mkdir -p /host/var/lib/rancher/agent/plans;
        echo "Copy agent.plan to /var/lib/rancher/agent/plans ...";
        cp /harvester-system-agent-plan/agnet.plan /host/var/lib/rancher/agent/plans;
        echo "Done";
---
apiVersion: upgrade.cattle.io/v1
kind: Plan
metadata:
  name: harvester-rotate-rke2-server-certs
  namespace: cattle-system
spec:
  concurrency: 1
  nodeSelector:
    matchLabels:
      harvesterhci.io/managed: "true"
      # currently, we allow etcd only, but not control-plane only node,
      # so we can use this label to filter server nodes
      node-role.kubernetes.io/etcd: "true"
  tolerations:
  - effect: NoExecute
    operator: Exists
  serviceAccountName: system-upgrade-controller
  # we don't need data from secret, just need to trigger the job
  secrets:
    - name: harvester-rotate-rke2-certs
      path: /harvester-rotate-rke2-certs
  version: v1.0.0
  upgrade:
    image: {{ .Values.generalJob.image.repository }}:{{ .Values.generalJob.image.tag }}
    command: ["/bin/sh", "-c"]
    args:
      - echo "Stop RKE2 server ...";
        chroot /host systemctl stop rke2-server;
        echo "Rotate certificates ...";
        chroot /host /opt/rke2/bin/rke2 certificate rotate;
        echo "Start RKE2 server ...";
        chroot /host systemctl start rke2-server;
        echo "Done";
---
apiVersion: upgrade.cattle.io/v1
kind: Plan
metadata:
  name: harvester-rotate-rke2-agent-certs
  namespace: cattle-system
spec:
  concurrency: 1
  nodeSelector:
    matchLabels:
      harvesterhci.io/managed: "true"
    matchExpressions:
      - key: node-role.kubernetes.io/etcd
        operator: NotIn
        values:
          - "true"
      - key: node-role.kubernetes.io/control-plane
        operator: NotIn
        values:
          - "true"
  tolerations:
  - effect: NoExecute
    operator: Exists
  serviceAccountName: system-upgrade-controller
  # we don't need data from secret, just need to trigger the job
  secrets:
    - name: harvester-rotate-rke2-certs
      path: /harvester-rotate-rke2-certs
  version: v1.0.0
  upgrade:
    image: {{ .Values.generalJob.image.repository }}:{{ .Values.generalJob.image.tag }}
    command: ["/bin/sh", "-c"]
    args:
      # Agent certificates are renewed every time the agent starts.
      # ref: https://docs.rke2.io/advanced#certificate-rotation
      - echo "Restart RKE2 agent to trigger certificate rotation ...";
        chroot /host systemctl restart rke2-agent;
        echo "Done";
